To create and use **Job Templates** in Jenkins with **default parameters** and **environment variables**, I'll provide a detailed explanation with multiple examples. This will help you understand how to define reusable templates and customize them for different jobs.

---

### **Prerequisites**
1. Ensure you have a plugin like **Jenkins Templating Engine (JTE)** or a similar plugin installed.
2. Restart Jenkins after installing the plugin.

---

### **Step 1: Create a Job Template**
1. Go to the Jenkins dashboard and click **New Item**.
2. Enter a name for your template (e.g., `My-Job-Template`).
3. Select the **Job Template** option (this option will appear if the plugin is installed correctly).
4. Click **OK**.

---

### **Step 2: Configure the Job Template**
In the template configuration, you can define:
- **Parameters**: To make the template reusable and customizable.
- **Environment Variables**: To pass dynamic values to the job.
- **Build Steps**: To define the actual tasks the job will perform.

#### **Example 1: Simple Job Template with Parameters**
1. In the template configuration, go to the **This project is parameterized** section.
2. Add a `String Parameter`:
   - Name: `GREETING`
   - Default Value: `Hello, World!`
3. Add a `Choice Parameter`:
   - Name: `ENVIRONMENT`
   - Choices: `dev`, `test`, `prod`
   - Default Value: `dev`
4. Add a build step (e.g., execute a shell script):
   ```bash
   echo "${GREETING}"
   echo "Deploying to ${ENVIRONMENT} environment."
   ```

5. Save the template.

---

#### **Example 2: Job Template with Environment Variables**
1. In the template configuration, go to the **This project is parameterized** section.
2. Add a `String Parameter`:
   - Name: `VERSION`
   - Default Value: `1.0.0`
3. Add an `Environment Variable`:
   - Name: `BUILD_ID`
   - Value: `${BUILD_NUMBER}` (Jenkins built-in variable)
4. Add a build step (e.g., execute a shell script):
   ```bash
   echo "Building version ${VERSION}"
   echo "Build ID: ${BUILD_ID}"
   ```

5. Save the template.

---

#### **Example 3: Job Template with Multiple Parameters and Conditional Logic**
1. In the template configuration, go to the **This project is parameterized** section.
2. Add a `Boolean Parameter`:
   - Name: `RUN_TESTS`
   - Default Value: `true`
3. Add a `String Parameter`:
   - Name: `BRANCH`
   - Default Value: `main`
4. Add a build step (e.g., execute a shell script with conditional logic):
   ```bash
   echo "Building from branch: ${BRANCH}"
   if [ "${RUN_TESTS}" = "true" ]; then
       echo "Running tests..."
   else
       echo "Skipping tests."
   fi
   ```

5. Save the template.

---

### **Step 3: Use the Job Template to Create Jobs**
1. Go to the Jenkins dashboard and click **New Item**.
2. Enter a name for your new job (e.g., `My-Job-From-Template`).
3. Select the **Job Template** option (or the option provided by the plugin).
4. In the configuration, select the template you created earlier (e.g., `My-Job-Template`).
5. Customize the parameters if needed (e.g., change `GREETING` or `ENVIRONMENT`).
6. Save the job.

---

### **Step 4: Run the Job**
1. Go to the newly created job and click **Build Now**.
2. If the job is parameterized, you will be prompted to provide values for the parameters (or use the default values).
3. The job will run using the template and display the output based on the parameters and environment variables.

---

### **Example Outputs**

#### **Example 1 Output**
If you run the job with the default parameters:
```
Hello, World!
Deploying to dev environment.
```

If you override the parameters (e.g., `GREETING = "Hi there!"` and `ENVIRONMENT = "prod"`):
```
Hi there!
Deploying to prod environment.
```

#### **Example 2 Output**
If you run the job with the default parameters:
```
Building version 1.0.0
Build ID: 1
```

#### **Example 3 Output**
If you run the job with the default parameters:
```
Building from branch: main
Running tests...
```

If you override the parameters (e.g., `RUN_TESTS = false`):
```
Building from branch: main
Skipping tests.
```

---

### **Step 5: Reuse the Template for Multiple Jobs**
You can create multiple jobs from the same template, each with different parameter values. For example:
- Job 1: Deploy to `dev` environment.
- Job 2: Deploy to `prod` environment with a custom greeting.
- Job 3: Skip tests for a specific branch.

---

### **Summary**
- **Parameters**: Make your template reusable by adding parameters (e.g., `String`, `Choice`, `Boolean`).
- **Environment Variables**: Use built-in or custom environment variables for dynamic values.
- **Conditional Logic**: Add logic to your build steps based on parameter values.

By following these steps, you can create powerful and reusable job templates in Jenkins. Let me know if you need further clarification or additional examples!
